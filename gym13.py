class ReadInX:
    def __set_name__(self, owner, name):
        self.name = '_x'
    def __get__(self, instance, owner):
        return getattr(instance, self.name)

class Integer:
    # Создаем класс дескриптор
    @classmethod
    # создаем в нем метод класса для проверки на соответствие типу данных
    def verify_coord(cls, arg):
        if type(arg) != int:
            raise TypeError('Coord must be integer')
    def __set_name__(self, owner, name):
        # Метод который автоматически сарбатывает при создании экземпляра класса дескриптора
        # self - ссылка на создаваемый экземпляр класса дескриптора (например х = Integer())
        # owner -ссылка на класс в котором создается объект класса дескриптора(например Поинт)
        # name - имя созданного экземпляра класса дескриптора (например х)
        self.name = '_' + name
        # эта строка будет создавать в экземпляре класса дескриптора х локальное свойство name = '_' + name ( например x.name = '_x')
    def __get__(self, instance, owner):
        # срабатывает когда мы обращаемся к дескриптору через экземпляр класса Поинт для считывания данных
        # self - ссылка на экземпляр класса дескриптора
        # instanse - ссылка на экземпляр класса Поинт
        # owner - ссылка на класс Поинт
        return getattr(instance, self.name)
        # instance - область видимости объекта из которого хотим взять атрибут
        #self.name - название атрибута которое хранится в локальном свойстве объекта дескриптора
    def __set__(self, instance, value):
        # срабатывает в момент присваивания значения объекту класса Поинт (например х) соответствующего значения
        # self - ссылка на объект класса дескриптора (например х)
        # instance - ссылается на экземпляр класса Поинт из которого был вызван соответствующий дескриптор
        #value числовое значение которое мы присвоили (например _х = 1)
        self.verify_coord(value)
        # ссылается на локальное свойство класса дескриптора, которое является ф-цией проверки верности типа данных
        setattr(instance, self.name, value)
        # с помощью сеттера создаем локальное свойство в классе Поинт
        # instance - ссылка на соответствующий экземпляр класс Поинт
        # self.name - локальное свойство экземпляра класса дескриптора которое создает строку (например "_х")
        # value - присваивает аргументу заданое значение

class Point3D:
    rx =ReadInX()
    # дескриптор НЕ данных
    x = Integer()
    y = Integer()
    z = Integer()
    # Создали экземпляры класса дескриптора данных
    def __init__(self, x, y, z):
        # инициалисзатор объекта класса Поинт
        self.x = x
        # self.x - обращается к объекту класса дескриптора и присваевает ему значние х
        self.y = y
        self.z = z

    @classmethod
    def verify_coord(cls, arg):
        if type(arg) != int:
            raise TypeError('Coords must be int')


p = Point3D(1, 2, 3)
print(p.__dict__)